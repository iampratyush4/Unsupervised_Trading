{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"    # This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    \n    for filename in filenames:\n        \n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-19T16:14:12.724693Z","iopub.execute_input":"2024-07-19T16:14:12.725077Z","iopub.status.idle":"2024-07-19T16:14:12.766771Z","shell.execute_reply.started":"2024-07-19T16:14:12.725046Z","shell.execute_reply":"2024-07-19T16:14:12.763024Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[1], line 14\u001b[0;36m\u001b[0m\n\u001b[0;31m    for filename in filenames:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after 'for' statement on line 12\n"],"ename":"IndentationError","evalue":"expected an indented block after 'for' statement on line 12 (3341891789.py, line 14)","output_type":"error"}]},{"cell_type":"code","source":"!pip install pandas_ta","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.772022Z","iopub.status.idle":"2024-07-19T16:14:12.772475Z","shell.execute_reply.started":"2024-07-19T16:14:12.772280Z","shell.execute_reply":"2024-07-19T16:14:12.772298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install yfinance","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.773713Z","iopub.status.idle":"2024-07-19T16:14:12.774081Z","shell.execute_reply.started":"2024-07-19T16:14:12.773898Z","shell.execute_reply":"2024-07-19T16:14:12.773914Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.regression.rolling import RollingOLS\nimport pandas_datareader.data as web\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport pandas_ta\nimport warnings\nimport yfinance as yf\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.775501Z","iopub.status.idle":"2024-07-19T16:14:12.775872Z","shell.execute_reply.started":"2024-07-19T16:14:12.775694Z","shell.execute_reply":"2024-07-19T16:14:12.775709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sp500 = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]\nsp500\n# this gets list of s&p500 stocks from this html page and then stores it in sp500 variable","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.777297Z","iopub.status.idle":"2024-07-19T16:14:12.777651Z","shell.execute_reply.started":"2024-07-19T16:14:12.777477Z","shell.execute_reply":"2024-07-19T16:14:12.777491Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sp500['Symbol'] = sp500['Symbol'].str.replace('.', '-')\nsp500['Symbol']","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.779025Z","iopub.status.idle":"2024-07-19T16:14:12.779407Z","shell.execute_reply.started":"2024-07-19T16:14:12.779230Z","shell.execute_reply":"2024-07-19T16:14:12.779245Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"symbols_list = sp500['Symbol'].unique().tolist()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.781086Z","iopub.status.idle":"2024-07-19T16:14:12.781492Z","shell.execute_reply.started":"2024-07-19T16:14:12.781309Z","shell.execute_reply":"2024-07-19T16:14:12.781324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"end_date = '2024-06-30' \n# end date takes a date and then in the start date we will take 8 years back, so that we can get data for ast 8 years\n\nstart_date = pd.to_datetime(end_date)-pd.DateOffset(365*8)\nstart_date","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.783173Z","iopub.status.idle":"2024-07-19T16:14:12.783557Z","shell.execute_reply.started":"2024-07-19T16:14:12.783366Z","shell.execute_reply":"2024-07-19T16:14:12.783382Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = yf.download(tickers=symbols_list,\n                 start=start_date,\n                 end=end_date)\n\n# this is a yfiannce functionality ","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.785067Z","iopub.status.idle":"2024-07-19T16:14:12.785594Z","shell.execute_reply.started":"2024-07-19T16:14:12.785324Z","shell.execute_reply":"2024-07-19T16:14:12.785345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df\n# this print all data but the format is not so good so we will be required to change it to diffrent format","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.787532Z","iopub.status.idle":"2024-07-19T16:14:12.788026Z","shell.execute_reply.started":"2024-07-19T16:14:12.787768Z","shell.execute_reply":"2024-07-19T16:14:12.787787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=df.stack()\ndf\n# this will create a more resonable table","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.789506Z","iopub.status.idle":"2024-07-19T16:14:12.789983Z","shell.execute_reply.started":"2024-07-19T16:14:12.789728Z","shell.execute_reply":"2024-07-19T16:14:12.789749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.index.names = ['date', 'ticker']\n\ndf.columns = df.columns.str.lower()\n\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.791340Z","iopub.status.idle":"2024-07-19T16:14:12.791864Z","shell.execute_reply.started":"2024-07-19T16:14:12.791597Z","shell.execute_reply":"2024-07-19T16:14:12.791618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"![Screenshot 2024-07-10 at 12.28.20â€¯AM.png](attachment:c69d6b92-aa62-4406-ac7d-83f1e16307df.png)\n","metadata":{},"attachments":{"c69d6b92-aa62-4406-ac7d-83f1e16307df.png":{"image/png":""}}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"\n# Garman Klass is a volatility estimator that incorporates open, low, high, and close prices of a security. Garman-Klass volatility extends Parkinson's volatility by taking into account the opening and closing price.\n\ndf['garman_klass_vol'] = ((np.log(df['high'])-np.log(df['low']))**2)/2-(2*np.log(2)-1)*((np.log(df['adj close'])-np.log(df['open']))**2)\n\n# this will add new column in df named gaman_klass_vol","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.793482Z","iopub.status.idle":"2024-07-19T16:14:12.793977Z","shell.execute_reply.started":"2024-07-19T16:14:12.793715Z","shell.execute_reply":"2024-07-19T16:14:12.793736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['rsi'] = df.groupby(level=1)['adj close'].transform(lambda x: pandas_ta.rsi(close=x, length=20))\n\ndf['bb_low'] = df.groupby(level=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,0])\n                                                          \ndf['bb_mid'] = df.groupby(level=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,1])\n                                                          \ndf['bb_high'] = df.groupby(level=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,2])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.795131Z","iopub.status.idle":"2024-07-19T16:14:12.795619Z","shell.execute_reply.started":"2024-07-19T16:14:12.795364Z","shell.execute_reply":"2024-07-19T16:14:12.795385Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.797249Z","iopub.status.idle":"2024-07-19T16:14:12.797732Z","shell.execute_reply.started":"2024-07-19T16:14:12.797482Z","shell.execute_reply":"2024-07-19T16:14:12.797502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def compute_atr(stock_data):\n    atr = pandas_ta.atr(high=stock_data['high'],\n                        low=stock_data['low'],\n                        close=stock_data['close'],\n                        length=14)\n    return atr.sub(atr.mean()).div(atr.std())\n\ndf['atr'] = df.groupby(level=1, group_keys=False).apply(compute_atr)\n\ndef compute_macd(close):\n    macd = pandas_ta.macd(close=close, length=20).iloc[:,0]\n    return macd.sub(macd.mean()).div(macd.std())\n\ndf['macd'] = df.groupby(level=1, group_keys=False)['adj close'].apply(compute_macd)\n\ndf['dollar_volume'] = (df['adj close']*df['volume'])/1e6","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.803227Z","iopub.status.idle":"2024-07-19T16:14:12.803643Z","shell.execute_reply.started":"2024-07-19T16:14:12.803450Z","shell.execute_reply":"2024-07-19T16:14:12.803467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.805011Z","iopub.status.idle":"2024-07-19T16:14:12.805439Z","shell.execute_reply.started":"2024-07-19T16:14:12.805250Z","shell.execute_reply":"2024-07-19T16:14:12.805267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"last_cols = [c for c in df.columns.unique(0) if c not in ['dollar_volume', 'volume', 'open',\n                                                          'high', 'low', 'close']]\n\ndata = (pd.concat([df.unstack('ticker')['dollar_volume'].resample('M').mean().stack('ticker').to_frame('dollar_volume'),\n                   df.unstack()[last_cols].resample('M').last().stack('ticker')],\n                  axis=1)).dropna()\n\ndata","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.807379Z","iopub.status.idle":"2024-07-19T16:14:12.807942Z","shell.execute_reply.started":"2024-07-19T16:14:12.807636Z","shell.execute_reply":"2024-07-19T16:14:12.807657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['dollar_volume'] = (data.loc[:, 'dollar_volume'].unstack('ticker').rolling(5*12, min_periods=12).mean().stack())\n\ndata['dollar_vol_rank'] = (data.groupby('date')['dollar_volume'].rank(ascending=False))\n\ndata = data[data['dollar_vol_rank']<150].drop(['dollar_volume', 'dollar_vol_rank'], axis=1)\n\ndata","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.809860Z","iopub.status.idle":"2024-07-19T16:14:12.810414Z","shell.execute_reply.started":"2024-07-19T16:14:12.810137Z","shell.execute_reply":"2024-07-19T16:14:12.810161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def calculate_returns(df):\n    \n    outlier_cutoff = 0.005\n\n    lags = [1, 2, 3, 6, 9, 12]\n\n    for lag in lags:\n\n        df[f'return_{lag}m'] = (df['adj close']\n                              .pct_change(lag)\n                              .pipe(lambda x: x.clip(lower=x.quantile(outlier_cutoff),\n                                                     upper=x.quantile(1-outlier_cutoff)))\n                              .add(1)\n                              .pow(1/lag)\n                              .sub(1))\n    return df\n    \n    \ndata = data.groupby(level=1, group_keys=False).apply(calculate_returns).dropna()\n\ndata","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.812981Z","iopub.status.idle":"2024-07-19T16:14:12.813377Z","shell.execute_reply.started":"2024-07-19T16:14:12.813190Z","shell.execute_reply":"2024-07-19T16:14:12.813206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"factor_data = web.DataReader('F-F_Research_Data_5_Factors_2x3',\n                               'famafrench',\n                               start='2010')[0].drop('RF', axis=1)\nfactor_data.index = factor_data.index.to_timestamp()\n\nfactor_data = factor_data.resample('M').last().div(100)\n\nfactor_data.index.name = 'date'\n\nfactor_data = factor_data.join(data['return_1m']).sort_index()\n\nfactor_data","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.814530Z","iopub.status.idle":"2024-07-19T16:14:12.814877Z","shell.execute_reply.started":"2024-07-19T16:14:12.814708Z","shell.execute_reply":"2024-07-19T16:14:12.814722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"observations = factor_data.groupby(level=1).size()\n\nvalid_stocks = observations[observations >= 10]\n\nfactor_data = factor_data[factor_data.index.get_level_values('ticker').isin(valid_stocks.index)]\n\nfactor_data","metadata":{"execution":{"iopub.status.busy":"2024-07-19T16:14:12.816418Z","iopub.status.idle":"2024-07-19T16:14:12.816798Z","shell.execute_reply.started":"2024-07-19T16:14:12.816609Z","shell.execute_reply":"2024-07-19T16:14:12.816624Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}